{"ast":null,"code":"const BASE_URL = '/api';\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({\n      message: response.statusText\n    }));\n    throw new Error(error.message || 'Error en la petición al servidor');\n  }\n  return response.json();\n};\nexport const getBots = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/bots`, {\n      headers: {\n        'x-api-key': 'expb_1234567890abcdef'\n      }\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error(\"Error fetching bots:\", error);\n    throw error;\n  }\n};\nexport const sendMessage = async payload => {\n  try {\n    const response = await fetch(`${BASE_URL}/chat`, {\n      method: 'POST',\n      headers: new Headers({\n        'Content-Type': 'application/json',\n        'x-api-key': 'expb_1234567890abcdef' // Añadir la clave API aquí\n      }),\n      body: JSON.stringify(payload)\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error(\"Error sending message:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","handleResponse","response","ok","error","json","catch","message","statusText","Error","getBots","fetch","headers","console","sendMessage","payload","method","Headers","body","JSON","stringify"],"sources":["P:/expertbot-hub/frontend/src/services/api.js"],"sourcesContent":["const BASE_URL = '/api';\n\nconst handleResponse = async (response) => {\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({ message: response.statusText }));\n    throw new Error(error.message || 'Error en la petición al servidor');\n  }\n  return response.json();\n};\n\nexport const getBots = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/bots`, {\n      headers: {\n        'x-api-key': 'expb_1234567890abcdef'\n      }\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error(\"Error fetching bots:\", error);\n    throw error;\n  }\n};\n\nexport const sendMessage = async (payload) => {\n  try {\n    const response = await fetch(`${BASE_URL}/chat`, {\n      method: 'POST',\n      headers: new Headers({\n        'Content-Type': 'application/json',\n        'x-api-key': 'expb_1234567890abcdef' // Añadir la clave API aquí\n      }),\n      body: JSON.stringify(payload),\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error(\"Error sending message:\", error);\n    throw error;\n  }\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,MAAM;AAEvB,MAAMC,cAAc,GAAG,MAAOC,QAAQ,IAAK;EACzC,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;MAAEC,OAAO,EAAEL,QAAQ,CAACM;IAAW,CAAC,CAAC,CAAC;IACnF,MAAM,IAAIC,KAAK,CAACL,KAAK,CAACG,OAAO,IAAI,kCAAkC,CAAC;EACtE;EACA,OAAOL,QAAQ,CAACG,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMK,OAAO,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGX,QAAQ,OAAO,EAAE;MAC/CY,OAAO,EAAE;QACP,WAAW,EAAE;MACf;IACF,CAAC,CAAC;IACF,OAAOX,cAAc,CAACC,QAAQ,CAAC;EACjC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdS,OAAO,CAACT,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMU,WAAW,GAAG,MAAOC,OAAO,IAAK;EAC5C,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGX,QAAQ,OAAO,EAAE;MAC/CgB,MAAM,EAAE,MAAM;MACdJ,OAAO,EAAE,IAAIK,OAAO,CAAC;QACnB,cAAc,EAAE,kBAAkB;QAClC,WAAW,EAAE,uBAAuB,CAAC;MACvC,CAAC,CAAC;MACFC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAC9B,CAAC,CAAC;IACF,OAAOd,cAAc,CAACC,QAAQ,CAAC;EACjC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdS,OAAO,CAACT,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}